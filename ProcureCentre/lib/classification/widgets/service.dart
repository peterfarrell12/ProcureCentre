import 'dart:html' as html;
import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';
import 'package:http/http.dart' as http;

Future<List> predictClass(List<String> text, String model, String cats) async {
  List predictList;
    var m = "$model.model";
  var c = "${cats}cats";
  Autogenerated testData = Autogenerated(message: text, model: m, categories: c);
//  Autogenerated testData = Autogenerated(message: text);
   var maybe = jsonEncode(testData);
   print(maybe);
  // var m = "$model.model";
  // var c = "${cats}cats";
  // print(maybe);
  // print(m);
  // print(c);


  var loginHeaders = {
    'Content-Type': 'application/json',
  };
  //var data = json.encode("{ 'message' : ['levovo', 'grinding aid']}");
  var res = await http.post('http://127.0.0.1:5000/predict',
      body: maybe, 
     headers: loginHeaders
);
  if (res.statusCode != 200)
    throw Exception('post error: statusCode= ${res.statusCode}');
  else {
    var dRes = json.decode(res.body);
    print(dRes['Prediction']);
    List temp = dRes['Prediction'];
    print(temp);
    predictList = temp;
    print(predictList);
  }
  return predictList;
}

// class Autogenerated {
//   List<String> message;

//   Autogenerated({this.message});

//   Autogenerated.fromJson(Map<String, dynamic> json) {
//     message = json['message'].cast<String>();
//   }

//   Map<String, dynamic> toJson() {
//     final Map<String, dynamic> data = new Map<String, dynamic>();
//     data['message'] = this.message;
//     return data;
//   }
// }

class Autogenerated {
  List<String> message;
  String model;
  String categories;

  Autogenerated({this.message, this.model, this.categories});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    message = json['message'].cast<String>();
    model = json['model'];
    categories = json['categories'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['message'] = this.message;
    data['model'] = this.model;
    data['categories'] = this.categories;
    return data;
  }
}

Future<String> sendFile(List<int> file, String filename) async {

  print("In Send File");
  var loginHeaders = {
    'Content-Type': 'multipart/form-dataitem',
  };
  var url = Uri.parse("http://127.0.0.1:5000/test");
  print(url);
  var request = new http.MultipartRequest("POST", url);

  request.headers.addAll(loginHeaders);
  request.fields.addAll({'name': filename});
  request.files.add(http.MultipartFile.fromBytes('file', file,
      //contentType: new MediaType('application', 'octet-stream'),
  filename: filename.toString()));
  return request.send().then((response)  async {
    final respStr = await response.stream.bytesToString();
    print(respStr);
    if (response.statusCode == 200){
      return respStr;
    }
    else {
      return "Network Error";
    }
  });

  //return "Success";
}


  
